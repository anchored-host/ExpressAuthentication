// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Member {
  id              String        @id @default(cuid())
  firstName       String        @db.VarChar(30)
  middleInitial   String        @db.VarChar(1)
  lastName        String        @db.VarChar(40)
  protectIdentity Boolean       @default(false)
  displayName     String?
  username        String        @db.MediumText
  birthdate       DateTime
  password        String        @db.Text
  tosAgree        Boolean
  privacyAgree    Boolean
  sessions        Session[]     @relation("member_session")
  roles           MemberRole[]  @relation("member_role")
  content         Content[]  @relation("member_")
  emails          EmailAddress[]  @unique @relation("member_email")
  tickets         MemberOnTicket[] @relation("member_ticket")
  status          Boolean       @default(true)
  todos           Todos[]                                        // Internal Help
  notes           Notes[]                                        // Internal Help
  creationAt      DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model EmailAddress {
  id              String        @id @default(cuid())
  email           String        @unique
  status          Boolean       @default(true)
  default         Boolean       @default(false)
  memberId        String
  member          Member        @relation("member_email", fields: [memberId], references: [id])
  creationAt      DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Webhooks {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String
  url       String
  type      Hook
  active    Boolean
  secret    String?
  createdBy String
}

model Todos {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  text      String
  done      Boolean  @default(false)
  createdBy User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Notes {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  title     String
  note      String
  createdBy User     @relation(fields: [userId], references: [id])
  userId    Int
}

enum ContentType {
  VIDEO_MP4
  VIDEO_MOV
  VIDEO_WMV
  VIDEO_MKV
  AUDIO_MP3
  AUDIO_WAV
  IMAGE_JPG
  IMAGE_WEBP
  IMAGE_PNG
  GIF
  TEXT
}

model Content {
  id              String        @id @default(cuid())
  contentType     ContentType
  content         String
  status          Boolean       @default(true)
  memberId        String
  member          Member        @relation("member_", fields: [memberId], references: [id])
  creationAt      DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model MemberRole {
  id              String        @id @default(cuid())
  memberId        String
  member          Member        @relation("member_role", fields: [memberId], references: [id])
  roleId          String
  role            Role          @relation(fields: [roleId], references: [id])
  creationAt      DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Role {
  id              String        @id @default(cuid())
  name            String        @db.Text
  weight          Int           @db.Int
  status          Boolean       @default(true)
  members         MemberRole[]
  creationAt      DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Session {
  id              String        @id @default(cuid())
  accessToken     String        @db.Text
  memberId        String
  member          Member        @relation("member_session", fields: [memberId], references: [id])
  status          Boolean       @default(true)
  creationAt      DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Ticket {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  name       String
  title      String
  detail     String?
  email      String
  note       String?
  isComplete Boolean
  priority   String
  assignedTo User?        @relation(fields: [userId], references: [id]) // Optional if sales tickets without account.
  media Content[]
}

// Responses on ticket.
model Comments {
    id       String   @id @default(cuid())
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @default(now())
    message  String
    name     String
    Ticket   Ticket?  @relation(fields: [ticketId], references: [id])
    addMedia Content[]
}
